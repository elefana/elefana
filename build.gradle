buildscript {
	ext {
		springBootVersion = '1.5.9.RELEASE'
		dockerComposeVersion = '0.6.9'
		dockerRunVersion = '0.17.2'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		maven { url "https://plugins.gradle.org/m2/" }
		flatDir dirs: 'lib'
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${dockerRunVersion}")
		classpath("com.avast.gradle:gradle-docker-compose-plugin:${dockerComposeVersion}")
		classpath ':proguard:'
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'

	version = '1.0.0-SNAPSHOT'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	ext {
		codecVersion = '1.10'
		esCompatVersion = '1.0.0'
		esQueryStringVersion = '1.0.1'
		hikariVersion = '2.7.4'
		jodaVersion = '2.9.9'
		jsoniterVersion = '0.9.18'
		nativesLoaderVersion = '1.0.0'
		restAssuredVersion = '3.0.6'
	}
	ext['postgresql.version'] = '42.1.4'
	ext['tomcat.version'] = '8.5.24'

	repositories {
		mavenLocal()
		mavenCentral()
	}

	configurations {
		compileOutput.extendsFrom (compile)
		testOutput.extendsFrom (testCompile)
	}
	
	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task bootJar(type: Jar, dependsOn: classes) {
		classifier = 'boot'
		from sourceSets.main.output
	}
	
	task testJar(type: Jar, dependsOn: testClasses) {
		classifier = 'test'
		from sourceSets.test.output
		include '**/*UAT.class'
	}

	artifacts {
		archives javadocJar, sourcesJar, testJar, bootJar
		testOutput testJar
	}
}

project(":" + rootProject.name + "-core") {
	bootRepackage.withJarTask = bootJar
	
	dependencies {
		compile('org.springframework.boot:spring-boot-starter-cache')
		compile('org.springframework.boot:spring-boot-starter-jdbc') {
			exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc' 
		}
		compile('org.springframework.boot:spring-boot-starter-web')
		compile "org.mini2Dx:natives-loader:$nativesLoaderVersion"
		compile "com.jsoniter:jsoniter:$jsoniterVersion"
		compile "com.zaxxer:HikariCP:$hikariVersion"
		compile "com.elefana:es-query-string-parser:$esQueryStringVersion"
		compile "com.elefana:es-compat-utils:$esCompatVersion"
		compile "commons-codec:commons-codec:$codecVersion"
		compile('org.postgresql:postgresql')
		
		testCompile('org.springframework.boot:spring-boot-starter-test')
	}
	
	task copyToRelease(type: Copy, dependsOn: bootRepackage) {
		from "build/libs/elefana-core-" + project.version + "-boot.jar"
		into "build/release/"
		rename { String fileName ->
			fileName.replace("elefana-core-" + project.version + "-boot", "elefana")
		}
	}
	
	task installBundler(type: Exec, dependsOn: copyToRelease) {
		commandLine = ["gem", "install", "bundler"]
	}
	
	task bundleInstall(type: Exec, dependsOn: installBundler) {
		commandLine = ["bundle", "install"]
	}
	
	task packageDeb(type: Exec, dependsOn: bundleInstall) {
		commandLine = ["fpm",
					"-s", "dir",
					"-t", "deb",
					"--name", "elefana",
					"--description", "Elastic HTTP API for PostgreSQL",
					"--vendor", "Viridian Software Ltd.",
					"--maintainer","Elefana Support<support@elefana.com>",
					"--version", project.version,
					"--url","elefana.com",
					"--prefix", "usr/share/elefana/",
					"--inputs", "fpm/package-inputs",
					"-a", "all",
					"--force",
					"--before-install", "fpm/deb/scripts/before-install.sh",
					"--after-install", "fpm/deb/scripts/after-install.sh" ]
	}
}

project(":" + rootProject.name + "-uats-es2") {
	apply plugin: "com.palantir.docker-run"
	
	bootRepackage.enabled = false
	
	dockerRun {
		name rootProject.name + "-uats-es2"
		image 'postgres:10'
		daemonize true
		clean true
		ports '5433:5432'
	}

	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile "com.zaxxer:HikariCP:$hikariVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
	}
	
	test.dependsOn project.getTasks().findByPath("dockerRun")
	test.finalizedBy project.getTasks().findByPath("dockerStop")
}

project(":" + rootProject.name + "-uats-es2-citus") {
	apply plugin: 'docker-compose'
	
	bootRepackage.enabled = false

	dockerCompose {
		forceRecreate = true
	}
	
	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile "com.zaxxer:HikariCP:$hikariVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
	}
	
	task cleanTests(type: Delete) {
		delete 'src/test/java'
	}
	
	task copyTests(type: Copy) {
		from '../uats-es2/src/test/java'
		into 'src/test/java'
	}
	
	clean.dependsOn cleanTests
	compileTestJava.dependsOn copyTests
	dockerCompose.isRequiredBy(test)
}

project(":" + rootProject.name + "-uats-es5") {
	apply plugin: "com.palantir.docker-run"
	
	bootRepackage.enabled = false
	
	dockerRun {
		name rootProject.name + "-uats-es2"
		image 'postgres:10'
		daemonize true
		clean true
		ports '5434:5432'
	}

	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile "com.zaxxer:HikariCP:$hikariVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
	}
	
	test.dependsOn project.getTasks().findByPath("dockerRun")
	test.finalizedBy project.getTasks().findByPath("dockerStop")
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.4.1'
}
