buildscript {
	ext {
		springBootVersion = '1.5.6.RELEASE'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		flatDir dirs: 'lib'
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath ':proguard:'
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'

	version = '1.0.0-SNAPSHOT'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	ext {
		codecVersion = '1.10'
		hikariVersion = '2.7.1'
		jodaVersion = '2.9.9'
		jsoniterVersion = '0.9.18'
		nativesLoaderVersion = '1.0.0'
		restAssuredVersion = '3.0.5'
	}

	repositories {
		mavenLocal()
		mavenCentral()
	}

	configurations {
		compileOutput.extendsFrom (compile)
		testOutput.extendsFrom (testCompile)
	}
	
	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task bootJar(type: Jar, dependsOn: classes) {
		classifier = 'boot'
		from sourceSets.main.output
	}
	
	task testJar(type: Jar, dependsOn: testClasses) {
		classifier = 'test'
		from sourceSets.test.output
		include '**/*UAT.class'
	}

	artifacts {
		archives javadocJar, sourcesJar, testJar, bootJar
		testOutput testJar
	}
}

project(":" + rootProject.name + "-core") {
	bootRepackage.withJarTask = bootJar
	
	dependencies {
		compile('org.springframework.boot:spring-boot-starter-cache')
		compile('org.springframework.boot:spring-boot-starter-jdbc') {
			exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc' 
		}
		compile('org.springframework.boot:spring-boot-starter-web')
		compile "org.mini2Dx:natives-loader:$nativesLoaderVersion"
		compile "com.jsoniter:jsoniter:$jsoniterVersion"
		compile "com.zaxxer:HikariCP:$hikariVersion"
		compile "joda-time:joda-time:$jodaVersion"
		compile "commons-codec:commons-codec:$codecVersion"
		compile('org.postgresql:postgresql')
		
		testCompile('org.springframework.boot:spring-boot-starter-test')
	}
	
	task copyJarToTempJar(type: Copy, dependsOn: bootJar) {
		from "build/libs/elefana-core-" + project.version + "-boot.jar"
		into "build/libs/"
		rename { String fileName ->
			fileName.replace(".jar", ".tmp.jar")
		}
	}
	
	task runProguard(type: proguard.gradle.ProGuardTask, dependsOn: copyJarToTempJar) {
		configuration "../proguard.txt"
		
		injars "build/libs/elefana-core-" + project.version + "-boot.tmp.jar"
		outjars "build/libs/elefana-core-" + project.version + "-boot.jar"
	}
	bootRepackage.dependsOn runProguard
}

project(":" + rootProject.name + "-uats-es2") {
	bootRepackage.enabled = false

	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
	}
}

project(":" + rootProject.name + "-uats-es5") {
	bootRepackage.enabled = false

	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.1'
}
