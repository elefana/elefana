import org.apache.tools.ant.taskdefs.condition.Os

buildscript {
	ext {
		asciiDoctorVersion = '1.5.7'
		dockerComposeVersion = '0.6.9'
		dockerRunVersion = '0.17.2'
		nexusStagingVersion = '0.9.0'
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
		maven { url "https://plugins.gradle.org/m2/" }
		flatDir dirs: 'lib'
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("gradle.plugin.com.palantir.gradle.docker:gradle-docker:${dockerRunVersion}")
		classpath("com.avast.gradle:gradle-docker-compose-plugin:${dockerComposeVersion}")
		classpath("org.asciidoctor:asciidoctor-gradle-plugin:${asciiDoctorVersion}")
		classpath("io.codearte.gradle.nexus:gradle-nexus-staging-plugin:${nexusStagingVersion}")
		classpath ':proguard:'
	}
}

subprojects {
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'io.spring.dependency-management'
	apply plugin: 'org.springframework.boot'

	group = 'com.elefana'
	version = '1.0.0-SNAPSHOT'

	sourceCompatibility = 1.8
	targetCompatibility = 1.8

	ext {
		codecVersion = '1.10'
		commonsMathVersion = '3.6.1'
		commonsValidatorVersion = '1.6'
		esCompatVersion = '1.0.1'
		esQueryStringVersion = '1.0.1'
		hikariVersion = '2.7.4'
		jodaVersion = '2.9.9'
		jsoniterVersion = '0.9.21'
		metricsVersion = '4.0.2'
		nativesLoaderVersion = '1.0.0'
		nettyVersion = '4.1.21.Final'
		restAssuredVersion = '3.0.6'
		stringSearchVersion = '2.2.0'
	}
	ext['postgresql.version'] = '42.1.4'
	ext['tomcat.version'] = '8.5.24'
	ext['spring-restdocs.version'] = '2.0.0.RELEASE'

	repositories {
		mavenLocal()
		mavenCentral()
	}

	configurations {
		compileOutput.extendsFrom (compile)
		testOutput.extendsFrom (testCompile)
	}
	
	task javadocJar(type: Jar) {
		classifier = 'javadoc'
		from javadoc
	}

	task sourcesJar(type: Jar) {
		classifier = 'sources'
		from sourceSets.main.allSource
	}

	task bootJar(type: Jar, dependsOn: classes) {
		classifier = 'boot'
		from sourceSets.main.output
	}
	
	task testJar(type: Jar, dependsOn: testClasses) {
		classifier = 'test'
		from sourceSets.test.output
		include '**/*UAT.class'
	}

	artifacts {
		archives javadocJar, sourcesJar, testJar, bootJar
		testOutput testJar
	}
	
	test {
		testLogging {
			events "failed"
			exceptionFormat "full"
		}
	}
	
	if(project.name.contains("core") || project.name.contains("api")) {
		apply plugin: 'maven'
		apply plugin: 'signing'
		
		if(project.hasProperty('ossrhUser') && project.hasProperty("release")) {
			apply plugin: "io.codearte.nexus-staging"
		
			nexusStaging {
				username = ossrhUser
				password = ossrhPassword
			}
		}
		
		// Maven Central publication
		if(project.hasProperty('ossrhUser')) {
			signing {
				sign configurations.archives
			}
			
			uploadArchives {
				repositories {
					mavenDeployer {
						// POM signature
						beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
						// Target repository
						repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
							authentication(userName: ossrhUser, password: ossrhPassword)
						}
						pom.project {
							name project.name
							description project.description
							packaging 'jar'
							url 'https://github.com/elefana/elefana'
		
							scm {
								connection 'scm:git:https://github.com/elefana/elefana.git'
								developerConnection 'scm:git:git@github.com:elefana/elefana.git'
								url 'https://github.com/elefana/elefana.git'
							}
		
							licenses {
								license {
									name 'Apache License 2.0'
									url 'https://opensource.org/licenses/Apache-2.0'
									distribution 'repo'
								}
							}
		
							developers {
								developer {
									id = 'tomcashman'
									name = 'Thomas Cashman'
									email = 'thomascashman404@gmail.com'
								}
							}
						}
					}
				}
			}
		}
	}
}

project(":" + rootProject.name + "-api") {
	description = 'Elefana API classes'
	
	bootRepackage.enabled = false
	
	dependencies {
		compile "com.jsoniter:jsoniter:$jsoniterVersion"
		compile "io.netty:netty-codec-http:$nettyVersion"
		
		testCompile('org.springframework.boot:spring-boot-starter-test')
	}
}

project(":" + rootProject.name + "-core") {
	description = 'Elastic HTTP API for PostgreSQL'
	
	bootRepackage.withJarTask = bootJar
	
	dependencies {
		compile project(path: ":" + rootProject.name + "-api")
		compile('org.springframework.boot:spring-boot-starter-cache')
		compile('org.springframework.boot:spring-boot-starter-jdbc') {
			exclude group: 'org.apache.tomcat', module: 'tomcat-jdbc' 
		}
		compile('org.springframework.boot:spring-boot-starter')
		compile "org.mini2Dx:natives-loader:$nativesLoaderVersion"
		compile "com.zaxxer:HikariCP:$hikariVersion"
		compile "io.netty:netty-all:$nettyVersion"
		compile "com.elefana:stringsearch:$stringSearchVersion"
		compile "com.elefana:es-query-string-parser:$esQueryStringVersion"
		compile "com.elefana:es-compat-utils:$esCompatVersion"
		compile "commons-codec:commons-codec:$codecVersion"
		compile "io.dropwizard.metrics:metrics-core:$metricsVersion"
		compile "io.dropwizard.metrics:metrics-graphite:$metricsVersion"
		compile "commons-validator:commons-validator:$commonsValidatorVersion"		
		compile('org.postgresql:postgresql')
		
		if (Os.isFamily(Os.FAMILY_MAC) && !project.hasProperty("release")) {
			compile "io.netty:netty-transport-native-kqueue:$nettyVersion"
		} else if (Os.isFamily(Os.FAMILY_UNIX) && !project.hasProperty("release")) {
			compile "io.netty:netty-transport-native-epoll:$nettyVersion"
		}
		
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
	}
	
	task copyToRelease(type: Copy, dependsOn: bootRepackage) {
		from "build/libs/elefana-core-" + project.version + "-boot.jar"
		into "build/release/"
		rename { String fileName ->
			fileName.replace("elefana-core-" + project.version + "-boot", "elefana")
		}
	}
	
	task installBundler(type: Exec, dependsOn: copyToRelease) {
		commandLine = ["gem", "install", "bundler"]
	}
	
	task bundleInstall(type: Exec, dependsOn: installBundler) {
		commandLine = ["bundle", "install"]
	}
	
	task packageDeb(type: Exec, dependsOn: bundleInstall) {
		commandLine = ["fpm",
					"-s", "dir",
					"-t", "deb",
					"--name", "elefana",
					"--description", "Elastic HTTP API for PostgreSQL",
					"--vendor", "Viridian Software Ltd.",
					"--maintainer","Elefana Support<support@elefana.com>",
					"--version", project.version,
					"--url","elefana.com",
					"--prefix", "usr/share/elefana/",
					"--inputs", "fpm/package-inputs",
					"-a", "all",
					"--force",
					"--before-install", "fpm/deb/scripts/before-install.sh",
					"--after-install", "fpm/deb/scripts/after-install.sh" ]
	}
}

project(":" + rootProject.name + "-uats-es2") {
	apply plugin: "com.palantir.docker-run"
	apply plugin: "org.asciidoctor.convert"
	
	bootRepackage.enabled = false
	ext['snippetsDir'] = file('build/generated-snippets')
	
	dockerRun {
		name rootProject.name + "-uats-es2"
		image 'postgres:10'
		daemonize true
		clean true
		ports '5433:5432'
	}

	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile('org.springframework.restdocs:spring-restdocs-restassured')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile "com.zaxxer:HikariCP:$hikariVersion"
		testCompile "org.apache.commons:commons-math3:$commonsMathVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
		
		asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext['spring-restdocs.version']}"
	}
	
	test.dependsOn project.getTasks().findByPath("dockerRun")
	test.finalizedBy project.getTasks().findByPath("dockerStop")
	
	test {
		outputs.dir snippetsDir
	}
}

project(":" + rootProject.name + "-uats-es2-citus") {
	apply plugin: 'docker-compose'
	apply plugin: "org.asciidoctor.convert"
	
	bootRepackage.enabled = false
	ext['snippetsDir'] = file('build/generated-snippets')

	dockerCompose {
		forceRecreate = true
	}
	
	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile('org.springframework.restdocs:spring-restdocs-restassured')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile "com.zaxxer:HikariCP:$hikariVersion"
		testCompile "org.apache.commons:commons-math3:$commonsMathVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
		
		asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext['spring-restdocs.version']}"
	}
	
	task cleanTests(type: Delete) {
		delete 'src/test/java'
	}
	
	task copyTests(type: Copy) {
		from '../uats-es2/src/test/java'
		into 'src/test/java'
	}
	
	clean.dependsOn cleanTests
	compileTestJava.dependsOn copyTests
	dockerCompose.isRequiredBy(test)
	
	test {
		outputs.dir snippetsDir
	}
}

project(":" + rootProject.name + "-uats-es5") {
	apply plugin: "com.palantir.docker-run"
	apply plugin: "org.asciidoctor.convert"
	
	bootRepackage.enabled = false
	ext['snippetsDir'] = file('build/generated-snippets')
	
	dockerRun {
		name rootProject.name + "-uats-es2"
		image 'postgres:10'
		daemonize true
		clean true
		ports '5434:5432'
	}

	dependencies {
		testCompile('org.springframework.boot:spring-boot-starter-test')
		testCompile('org.springframework.restdocs:spring-restdocs-restassured')
		testCompile "io.rest-assured:rest-assured:$restAssuredVersion"
		testCompile "com.zaxxer:HikariCP:$hikariVersion"
		testCompile "org.apache.commons:commons-math3:$commonsMathVersion"
		testCompile project(path: ":" + rootProject.name + "-core")
		
		asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:${project.ext['spring-restdocs.version']}"
	}
	
	test.dependsOn project.getTasks().findByPath("dockerRun")
	test.finalizedBy project.getTasks().findByPath("dockerStop")
	
	test {
		outputs.dir snippetsDir
	}
}

project(":" + rootProject.name + "-docs") {
	apply plugin: "org.asciidoctor.convert"
	
	bootRepackage.enabled = false
	ext['snippetsDir'] = file('build/generated-snippets')
	
	asciidoctor {
		inputs.dir snippetsDir
		dependsOn test
	}
	
	task copyGeneratedSnippets(type: Copy) {
		from '../uats-es2/build/generated-snippets'
		from '../uats-es5/build/generated-snippets'
		into snippetsDir
	}
	
	copyGeneratedSnippets.dependsOn project(":" + rootProject.name + "-uats-es2").tasks.test,
		project(":" + rootProject.name + "-uats-es5").tasks.test
	asciidoctor.dependsOn copyGeneratedSnippets	
	build.dependsOn asciidoctor
}

task wrapper(type: Wrapper) {
	gradleVersion = '4.4.1'
}
